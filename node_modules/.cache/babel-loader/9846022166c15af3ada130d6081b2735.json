{"ast":null,"code":"import _classCallCheck from \"/opt/lampp/htdocs/Lukman/sbadmin2reactjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/lampp/htdocs/Lukman/sbadmin2reactjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/lampp/htdocs/Lukman/sbadmin2reactjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/lampp/htdocs/Lukman/sbadmin2reactjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/lampp/htdocs/Lukman/sbadmin2reactjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/lampp/htdocs/Lukman/sbadmin2reactjs/src/components/Charts/FlotCharts/MovingLineChart.jsx\";\n// jQuery\nimport $ from \"jquery\";\nimport React, { PureComponent } from 'react';\n\nvar MovingLineChart =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(MovingLineChart, _PureComponent);\n\n  function MovingLineChart(props) {\n    var _this;\n\n    _classCallCheck(this, MovingLineChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MovingLineChart).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(MovingLineChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //Flot Moving Line Chart\n      $(function () {\n        var container = $(\"#flot-line-chart-moving\"); // Determine how many data points to keep based on the placeholder's initial size;\n        // this gives us a nice high-res plot while avoiding more than one point per pixel.\n\n        var maximum = container.outerWidth() / 2 || 300; //\n\n        var data = [];\n\n        function getRandomData() {\n          if (data.length) {\n            data = data.slice(1);\n          }\n\n          while (data.length < maximum) {\n            var previous = data.length ? data[data.length - 1] : 50;\n            var y = previous + Math.random() * 10 - 5;\n            data.push(y < 0 ? 0 : y > 100 ? 100 : y);\n          } // zip the generated y values with the x values\n\n\n          var res = [];\n\n          for (var i = 0; i < data.length; ++i) {\n            res.push([i, data[i]]);\n          }\n\n          return res;\n        } //\n\n\n        var series = [{\n          data: getRandomData(),\n          lines: {\n            fill: true\n          }\n        }]; //\n\n        var plot = $.plot(container, series, {\n          grid: {\n            borderWidth: 1,\n            minBorderMargin: 20,\n            labelMargin: 10,\n            backgroundColor: {\n              colors: [\"#fff\", \"#e4f4f4\"]\n            },\n            margin: {\n              top: 8,\n              bottom: 20,\n              left: 20\n            },\n            markings: function markings(axes) {\n              var markings = [];\n              var xaxis = axes.xaxis;\n\n              for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {\n                markings.push({\n                  xaxis: {\n                    from: x,\n                    to: x + xaxis.tickSize\n                  },\n                  color: \"rgba(232, 232, 255, 0.2)\"\n                });\n              }\n\n              return markings;\n            }\n          },\n          xaxis: {\n            tickFormatter: function tickFormatter() {\n              return \"\";\n            }\n          },\n          yaxis: {\n            min: 0,\n            max: 110\n          },\n          legend: {\n            show: true\n          }\n        }); // Update the random dataset at 25FPS for a smoothly-animating chart\n\n        setInterval(function updateRandom() {\n          series[0].data = getRandomData();\n          plot.setData(series);\n          plot.draw();\n        }, 40);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-lg-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"panel panel-default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"panel-heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Moving Line Chart Example\"), React.createElement(\"div\", {\n        className: \"panel-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flot-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flot-chart-content\",\n        id: \"flot-line-chart-moving\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return MovingLineChart;\n}(PureComponent);\n\nexport default MovingLineChart;","map":{"version":3,"sources":["/opt/lampp/htdocs/Lukman/sbadmin2reactjs/src/components/Charts/FlotCharts/MovingLineChart.jsx"],"names":["$","React","PureComponent","MovingLineChart","props","state","container","maximum","outerWidth","data","getRandomData","length","slice","previous","y","Math","random","push","res","i","series","lines","fill","plot","grid","borderWidth","minBorderMargin","labelMargin","backgroundColor","colors","margin","top","bottom","left","markings","axes","xaxis","x","floor","min","max","tickSize","from","to","color","tickFormatter","yaxis","legend","show","setInterval","updateRandom","setData","draw"],"mappings":"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","sourcesContent":["// jQuery\nimport $ from \"jquery\";\n\nimport React, { PureComponent } from 'react';\n\nclass MovingLineChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    componentDidMount() {\n        //Flot Moving Line Chart\n        $(function() {\n\n            var container = $(\"#flot-line-chart-moving\");\n\n            // Determine how many data points to keep based on the placeholder's initial size;\n            // this gives us a nice high-res plot while avoiding more than one point per pixel.\n\n            var maximum = container.outerWidth() / 2 || 300;\n\n            //\n\n            var data = [];\n\n            function getRandomData() {\n\n                if (data.length) {\n                    data = data.slice(1);\n                }\n\n                while (data.length < maximum) {\n                    var previous = data.length ? data[data.length - 1] : 50;\n                    var y = previous + Math.random() * 10 - 5;\n                    data.push(y < 0 ? 0 : y > 100 ? 100 : y);\n                }\n\n                // zip the generated y values with the x values\n\n                var res = [];\n                for (var i = 0; i < data.length; ++i) {\n                    res.push([i, data[i]])\n                }\n\n                return res;\n            }\n\n            //\n\n            let series = [{\n                data: getRandomData(),\n                lines: {\n                    fill: true\n                }\n            }];\n\n            //\n\n            var plot = $.plot(container, series, {\n                grid: {\n                    borderWidth: 1,\n                    minBorderMargin: 20,\n                    labelMargin: 10,\n                    backgroundColor: {\n                        colors: [\"#fff\", \"#e4f4f4\"]\n                    },\n                    margin: {\n                        top: 8,\n                        bottom: 20,\n                        left: 20\n                    },\n                    markings: function(axes) {\n                        var markings = [];\n                        var xaxis = axes.xaxis;\n                        for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {\n                            markings.push({\n                                xaxis: {\n                                    from: x,\n                                    to: x + xaxis.tickSize\n                                },\n                                color: \"rgba(232, 232, 255, 0.2)\"\n                            });\n                        }\n                        return markings;\n                    }\n                },\n                xaxis: {\n                    tickFormatter: function() {\n                        return \"\";\n                    }\n                },\n                yaxis: {\n                    min: 0,\n                    max: 110\n                },\n                legend: {\n                    show: true\n                }\n            });\n\n            // Update the random dataset at 25FPS for a smoothly-animating chart\n\n            setInterval(function updateRandom() {\n                series[0].data = getRandomData();\n                plot.setData(series);\n                plot.draw();\n            }, 40);\n\n        });\n    }\n    render() { \n        return ( \n            <React.Fragment>\n                <div className=\"col-lg-6\">\n                    <div className=\"panel panel-default\">\n                        <div className=\"panel-heading\">\n                            Moving Line Chart Example\n                        </div>\n                        {/* <!-- /.panel-heading --> */}\n                        <div className=\"panel-body\">\n                            <div className=\"flot-chart\">\n                                <div className=\"flot-chart-content\" id=\"flot-line-chart-moving\"></div>\n                            </div>\n                        </div>\n                        {/* <!-- /.panel-body --> */}\n                    </div>\n                    {/* <!-- /.panel --> */}\n                </div>\n                {/* <!-- /.col-lg-6 --> */}\n            </React.Fragment>\n         );\n    }\n}\n \nexport default MovingLineChart;"]},"metadata":{},"sourceType":"module"}